{"version":3,"sources":["routes/home.js","routes/blog.js","routes/blog_detail.js","App.js","serviceWorker.js","index.js"],"names":["Home","location","window","react_default","a","createElement","className","Jumbotron","Button","variant","onClick","browserHistory","push","Badge","concat","href","Component","Blog","props","context","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","post_list","post_count","_this2","axios","get","then","res","setState","data","items","total","_this$state","class","map","item","Card","style","width","margin","cursor","id","Img","src","banner","height","background","Body","Title","title","Text","description","BlogDetail","post","params","marginBottom","content","App","Navbar","bg","Brand","Nav","Link","es","history","path","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.343e0e7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {browserHistory} from 'react-router';\nimport { Jumbotron,Button, Badge  } from 'react-bootstrap';\n\nexport default class Home extends Component {\n  render() {\n    const location = window.location;\n    return (\n      <div className=\"container\">\n        <Jumbotron>\n          <h1>Hello, world!</h1>\n          <p>\n            这是一个简单的博客网站，您现在是通过浏览器访问看到这个如此“绚丽”的网站界面，您可以继续访问博客页面查看我写的“博客”。\n          </p>\n          <p>\n            <Button variant=\"primary\" onClick={() => {browserHistory.push('/blog')}}>前往博客</Button>\n          </p>\n          <p>\n            当你以搜索引擎UA来访问该路径，将会得到另一个非常简陋的页面内容。可以在命令行测试：<Badge variant=\"secondary\">{`curl ${location.href} -H 'user-agent: Baiduspider'`}</Badge>，这就是seo-mask，专门为搜索引擎的蜘蛛提供更符合seo规范的简单页面，免除spa改造的麻烦。\n          </p>\n          <p><Button variant=\"info\">了解seo-mask</Button></p>\n        </Jumbotron>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {browserHistory} from 'react-router';\nimport {Card, Button, Jumbotron, Badge} from 'react-bootstrap';\nimport axios from 'axios';\n\nexport default class Blog extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      post_list: [],\n      post_count: 0,\n    };\n  }\n  componentDidMount() {\n    // 从Mock服务器获取博客列表\n    axios.get('/api/posts').then((res) => {\n      this.setState({post_list: res.data.items, post_count: res.data.total})\n    })\n  }\n  render() {\n    const {post_list, post_count} = this.state;\n    const location = window.location;\n    return (\n      <div class=\"container\">\n        <Jumbotron>\n          <h1>查看当前页面的seo-mask</h1>\n          <p>\n            在命令行测试：<Badge variant=\"secondary\">{`curl ${location.href} -H 'user-agent: Baiduspider'`}</Badge>\n          </p>\n          <p><Button variant=\"info\">了解seo-mask</Button></p>\n        </Jumbotron>\n        {\n          post_list.map((item) => {\n            return (\n              <Card style={{ width: '500px', margin: '30px auto', cursor: 'pointer' }}  onClick={()=>{browserHistory.push(`/blog/${item.id}`)}}>\n                <Card.Img variant=\"top\" src={item.banner} style={{width: '500px', height: '300px', background: '#ddd'}}/>\n                <Card.Body>\n                  <Card.Title>{item.title}</Card.Title>\n                  <Card.Text>\n                    {item.description}\n                  </Card.Text>\n                  <Button variant=\"primary\" onClick={()=>{browserHistory.push(`/blog/${item.id}`)}}>Go somewhere</Button>\n                </Card.Body>\n              </Card>\n            )\n          })\n        }\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport {Card, Button, Jumbotron, Badge} from 'react-bootstrap';\nimport {browserHistory} from 'react-router';\nimport axios from 'axios';\n\nexport default class BlogDetail extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      post: {}\n    };\n  }\n  componentDidMount() {\n    // 从Mock服务器获取博客列表\n    axios.get('/api/post/' + this.props.params.id).then((res) => {\n      this.setState({post: res.data})\n    })\n  }\n  render() {\n    const {post} = this.state;\n    const location = window.location;\n    return (\n      <div class=\"container\" style={{marginBottom: '30px'}}>\n        <Jumbotron>\n          <h1>查看当前页面的seo-mask</h1>\n          <p>\n            在命令行测试：<Badge variant=\"secondary\">{`curl ${location.href} -H 'user-agent: Baiduspider'`}</Badge>\n          </p>\n          <p><Button variant=\"info\">了解seo-mask</Button></p>\n        </Jumbotron>\n        <Card>\n          <Card.Img variant=\"top\" src={post.banner} style={{width: '100%', background: '#ddd'}}/>\n          <Card.Body>\n            <Card.Title>{post.title}</Card.Title>\n            <Card.Text>\n              {post.content}\n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { Router, Route, browserHistory } from 'react-router'\nimport Home from './routes/home';\nimport Blog from './routes/blog';\nimport BlogDetail from './routes/blog_detail';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <Navbar bg=\"dark\" variant=\"dark\" style={{marginBottom: '30px'}}>\n            <Navbar.Brand>SEO-Mask</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n              <Nav.Link onClick={() => {browserHistory.push('/')}}>Home</Nav.Link>\n              <Nav.Link onClick={() => {browserHistory.push('/blog')}}>Blog</Nav.Link>\n            </Nav>\n          </Navbar>\n          <Router history={browserHistory}>\n            <Route path=\"/\" component={Home}/>\n            <Route path=\"/blog\" component={Blog}/>\n            <Route path=\"/blog/:id\" component={BlogDetail}/>\n          </Router>\n      </div>\n    );\n  }\n}\n\nexport default  App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}